# 楕円曲線関数
# y^2 = x^3 + ax + b
#
#
# 基準点（ベース）となるG（x, y）座標はsecp256k1の場合以下の通りに決まっている

x = "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798".to_i(16)
# => 55066263022277343669578718895168534326250603453777594175500187360389116729240

y = "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8".to_i(16)
# => 32670510020758816978083085130507043184471273380659243275938904335757337482424


# 剰余系の素数pも同じくsecp256k1では以下の通りになる。
p = 2 ** 256 - 2**32 - 2**9 - 2**8 - 2**7 - 2**6 - 2**4 - 1 # 注) pはRubyでは予約語なんですがまあ見逃してください
# => 115792089237316195423570985008687907853269984665640564039457584007908834671663

# Gをスカラー倍していってnG = Oとなる最小の数(位数)。これもsecp256k1だと基準点Gが固定されているので必ずこの値になる。
n = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141".to_i(16)
# => 115792089237316195423570985008687907852837564279074904382605163141518161494337

# 楕円曲線関数でいうところのパラメータa, bはsecp256k1の場合それぞれ0, 7になる
a = 0
b = 7
# つまり
# y^2 = x^3 + 7
# となる

require 'securerandom'

# 秘密鍵。1からGの位数 - 1の範囲でランダムに選ぶ。
# 推定されないように必ず安全な乱数生成器を使う。randとか使ったらダメぜったい（理由わからない人は結城 浩さんの「暗号技術入門」読むといいです）
private_key = SecureRandom.random_number(n - 1)
